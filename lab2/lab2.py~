# Fall 2012 6.034 Lab 2: Search
#
# Your answers for the true and false questions will be in the following form.  
# Your answers will look like one of the two below:
#ANSWER1 = True
#ANSWER1 = False

# 1: True or false - Hill Climbing search is guaranteed to find a solution
#    if there is a solution
ANSWER1 = False

# 2: True or false - Best-first search will give an optimal search result
#    (shortest path length).
#    (If you don't know what we mean by best-first search, refer to
#     http://courses.csail.mit.edu/6.034f/ai3/ch4.pdf (page 13 of the pdf).)
ANSWER2 = False

# 3: True or false - Best-first search and hill climbing make use of
#    heuristic values of nodes.
ANSWER3 = True
# 4: True or false - A* uses an extended-nodes set.
ANSWER4 = True

# 5: True or false - Breadth first search is guaranteed to return a path
#    with the shortest number of nodes.
ANSWER5 = True

# 6: True or false - The regular branch and bound uses heuristic values
#    to speed up the search for an optimal path.
ANSWER6 = False

# Import the Graph data structure from 'search.py'
# Refer to search.py for documentation
from search import Graph

## Optional Warm-up: BFS and DFS
# If you implement these, the offline tester will test them.
# If you don't, it won't.
# The online tester will not test them.

def bfs(graph, start, goal):
    raise NotImplementedError

## Once you have completed the breadth-first search,
## this part should be very simple to complete.
def dfs(graph, start, goal):
    raise NotImplementedError


## Now we're going to add some heuristics into the search.  
## Remember that hill-climbing is a modified version of depth-first search.
## Search direction should be towards lower heuristic values to the goal.

def hill_climbing(graph, start, goal):
    agenda = [[start]]
    while len(agenda) > 0:
        node = agenda.pop()
        if node[-1] == goal:
            return node
        p = []
        for e in graph.get_connected_nodes(node[-1]):
            if e not in node:
                p.append(node+[e])
                
        p = sorted(p, key=lambda pp: graph.get_heuristic(pp[-1], goal), reverse=True)
        agenda.extend(p)
    return []


## Now we're going to implement beam search, a variation on BFS
## that caps the amount of memory used to store paths.  Remember,
## we maintain only k candidate paths of length n in our agenda at any time.
## The k top candidates are to be determined using the 
## graph get_heuristic function, with lower values being better values.
def beam_search(graph, start, goal, beam_width):
    agenda = [[start]]
    while len(agenda) > 0:
        p = []
        for node in agenda:
            if node[-1] == goal:
                return node
            for e in graph.get_connected_nodes(node[-1]):
                if e not in node:
                    p.append(node+[e])

        p = sorted(p, key=lambda pp: graph.get_heuristic(pp[-1], goal))
        agenda = p[0:beam_width]
    return []

## Now we're going to try optimal search.  The previous searches haven't
## used edge distances in the calculation.

## This function takes in a graph and a list of node names, and returns
## the sum of edge lengths along the path -- the total distance in the path.
def path_length(graph, node_names):
    l = 0
    for i in xrange(len(node_names)-1):
        l += graph.get_edge(node_names[i],node_names[i+1]).length
    return l


def branch_and_bound(graph, start, goal):
    agenda=[[start]]
    while len(agenda) > 0:
        node = agenda.pop(0)
        if node[-1] == goal:
            return node
        for e in graph.get_connected_nodes(node[-1]):
            if e not in node:
                if e == goal:
                    return node + [e]
                agenda.append(node + [e])
        agenda = sorted(agenda, key=lambda pp: path_length(graph, pp))
    return []

def a_star(graph, start, goal):
    agenda=[[start]]
    while len(agenda) > 0:
        node = agenda.pop(0)
        if node[-1] == goal:
            return node
        for e in graph.get_connected_nodes(node[-1]):
            if e not in node:
                if e == goal:
                    return node + [e]
                agenda.append(node + [e])
        agenda = sorted(agenda, key=lambda p: (graph.get_heuristic(p[-1], goal)+path_length(graph, p)))
    return []


## It's useful to determine if a graph has a consistent and admissible
## heuristic.  You've seen graphs with heuristics that are
## admissible, but not consistent.  Have you seen any graphs that are
## consistent, but not admissible?

def is_admissible(graph, goal):
    for n in graph.nodes:
        p =  hill_climbing(graph, n, goal)
        if graph.is_valid_path(p):
            l = path_length(graph, p)
            if graph.get_heuristic(n, goal) > l:
                return 0
    return 1


def is_consistent(graph, goal):
    if not is_admissible(graph,goal):
        return 0
    if graph.get_heuristic(goal, goal) != 0:
        return 0
    for e in graph.edges:
        A = e.node1
        B = e.node2
        l = e.length
        if not abs(graph.get_heuristic(A,goal)-graph.get_heuristic(B,goal)) <= l:
            return 0
    return 1

HOW_MANY_HOURS_THIS_PSET_TOOK = '7'
WHAT_I_FOUND_INTERESTING = 'meh'
WHAT_I_FOUND_BORING = 'nothing much to learn'
